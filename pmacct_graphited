#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Copyright (C) 2014 Bernd Zeimetz <bernd@bzed.de>
Copyright (C) 2014 conova communications GmbH

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

from setproctitle import setproctitle
from application import log
from application.process import process, ProcessError

from watchdog.observers import Observer
from watchdog.events import RegexMatchingEventHandler
from setproctitle import setproctitle

import time
import os
import re
import sys
import signal


class PmacctDirectoryHandler(RegexMatchingEventHandler):

    def __init__(self):
        RegexMatchingEventHandler.__init__( self,
                                            regexes=[r'^pmacct_[0-9]+\.json$'],
                                            ignore_directories=True,
                                            case_sensitive=True
                                            )



class PmacctGraphiteD(object):


    def __init__(self, local_as, default_as, graphite_prefix, pmacct_aggregations):
        self.stop_now = False
        self.observer = Observer()


    def run(self):
        self.observer.start()
        while not self.stop_now:
            time.sleep(1)
        self.observer.stop()
        self.observer.join()

    def stop(self):
        self.stop_now = True

if __name__ == "__main__":
    from argparse import ArgumentParser
    from optparse import OptionParser
    from os.path import basename

    name = os.path.basename(sys.argv[0])

    epilog = '%s - delivering your pmacct statistics to graphite since 2014' %(name,)

    parser = ArgumentParser(epilog=epilog)
    parser.add_argument('-N', '--nodaemon',
                        action='store_true',
                        dest='nodaemon',
                        default=False,
                        help='do not run as daemon and log to stdout/stderr')
    parser.add_argument('-d', '--debug',
                        action='store_true',
                        dest='debug',
                        default=False,
                        help='enable debugging')
    parser.add_argument('-l', '--local-as',
                        action='append',
                        dest='local_as',
                        help='mark given AS number as local; can be specified as often as necessary',
                        type=int,
                        required=True)
    parser.add_argument('-a', '--default-as',
                        action='store',
                        dest='default_as',
                        help='default AS number, AS "0" will be replaced by this number in graphite',
                        default=None,
                        type=int)
    parser.add_argument('-g', '--graphite-prefix',
                        action='store',
                        dest='graphite_prefix',
                        help='prefix for generated graphite metric names',
                        default='network.pmacct',
                        type=str)
    parser.add_argument('-p', '--pmacct-aggregations',
                        action='append',
                        dest='pmacct_aggregations_args',
                        help='''pmacct aggregation name and directory we want to track;
                        Format: graphite_name:type:spool_directory;
                        Valid types: peer,as;
                        can be specified as often as necessary''',
                        required=True,
                        type=str)
    options = parser.parse_args()

    setproctitle('%s' %(name,) )

    if options.debug:
        DEBUG=True

    log.msg("Starting %s." % name)
    if not options.nodaemon:
        pidfile = process.runtime_file('%s.pid' % name)
        try:
            process.daemonize(pidfile)
        except ProcessError, e:
            log.fatal(str(e))
            sys.exit(1)
        else:
            log.start_syslog(name)
    log.msg("%s started" % name)


    # parse pmacct_aggregations into a dict
    pmacct_aggregations = {}
    for pmacct_aggregation in options.pmacct_aggregations_args:
        try:
            graphite_name, agg_type, spool_dirctory = pmacct_aggregation.split(':')
            if not graphite_name:
                raise Exception('graphite_name must not be empty!')
            graphite_name = graphite_name.strip('.')
            if not agg_type in ['as', 'peer']:
                raise Exception('unknown aggregation type "%s", please specify as or peer!' %(agg_type, ))
            if not os.path.isdir(spool_dirctory):
                raise Exception('directory "%s" does not exist' %(spool_dirctory))
            if pmacct_aggregations.has_key(graphite_name):
                raise Exception('please specify "%s" as aggregation name once only' %(graphite_name,))

        except Exception, e:
            log.fatal("Failed to parse option '-p %s': '%s'" %(pmacct_aggregation, str(e)))
            sys.exit(2)
        else:
            pmacct_aggregations['graphite_name'] = {}
            pmacct_aggregations['graphite_name']['type'] = agg_type
            pmacct_aggregations['graphite_name']['spool_dirctory'] = spool_dirctory

    pgd = PmacctGraphiteD(options.local_as,
                          options.default_as,
                          options.graphite_prefix.strip('.'),
                          pmacct_aggregations)

    try:
        pgd.run()
    except KeyboardInterrupt, SystemExit:
        pgd.stop()

